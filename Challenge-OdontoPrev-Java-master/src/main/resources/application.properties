spring.application.name=challenge-odontoprev
spring.messages.basename=messages
spring.messages.encoding=UTF-8



# ========================
# Configura  o H2 para testes locais
# ========================
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

server.port=8080

# ========================
# Configura  o Oracle original
# ========================
#spring.datasource.url=jdbc:oracle:thin:@oracle.fiap.com.br:1521:ORCL
#spring.datasource.username=rm553724
#spring.datasource.password=150704
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.OracleDialect

# Ativa endpoints essenciais
management.endpoints.web.exposure.include=health,info,metrics,env

# Mostra detalhes completos do health (incluindo status do DB)
management.endpoint.health.show-details=always

# Customiza a info
info.app.name=Challenge OdontoPrev
info.app.description=Sistema de gest o odontol gica
# Configura  o RabbitMQ
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

# Nome da fila que vamos usar
app.rabbitmq.queue=consulta-registrada-queue
app.rabbitmq.exchange=consulta-exchange
app.rabbitmq.routingkey=consulta-registrada-key

#Comando docker para rodar
#docker run -d --hostname rabbitmq --name rabbitmq-container -p 5672:5672 -p 15672:15672 rabbitmq:3-management